import { OnDestroy, OnInit } from '@angular/core';
import { HistoryItem } from '../../interfaces/history-item';
import { HistoryService } from '../../services/history.service';
import * as i0 from "@angular/core";
export declare class FilterComponent implements OnInit, OnDestroy {
    private historyService;
    imageEditor: any;
    activeObjectId: number;
    filterBlurChecked: boolean;
    filterBlurValue: number;
    filterGrayscaleChecked: boolean;
    filterSepiaChecked: boolean;
    filterEmbossChecked: boolean;
    filterInvertChecked: boolean;
    filterVintageChecked: boolean;
    filterSharpenChecked: boolean;
    filterWhiteRemovalChecked: boolean;
    filterWhiteRemovalDistance: number;
    filterBrightnessChecked: boolean;
    filterBrightnessValue: number;
    filterNoiseChecked: boolean;
    filterNoiseValue: number;
    filterPixelateChecked: boolean;
    filterPixelateValue: number;
    filterColorFilterChecked: boolean;
    filterColorFilterThreshold: number;
    defaultFilterTintColors: string[];
    filterTintChecked: boolean;
    filterTintColor: string;
    defaultFilterMultiplyColors: string[];
    filterMultiplyChecked: boolean;
    filterMultiplyColor: string;
    defaultFilterBlendColors: string[];
    filterBlendChecked: boolean;
    filterBlendColor: string;
    private historyServiceSubscription;
    constructor(historyService: HistoryService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    rebindFields(items: HistoryItem[]): void;
    private getAppliedFilterArgument;
    private hasAppliedFilter;
    filterWhiteRemovalCheckedChanged(newValue: boolean): void;
    filterWhiteRemovalDistanceChanged(newValue: number, isSilent: boolean): void;
    filterBrightnessCheckedChanged(newValue: boolean): void;
    filterBrightnessValueChanged(newValue: number, isSilent: boolean): void;
    filterNoiseCheckedChanged(newValue: boolean): void;
    filterNoiseValueChanged(newValue: number, isSilent: boolean): void;
    filterPixelateCheckedChanged(newValue: boolean): void;
    filterPixelateValueChanged(newValue: number, isSilent: boolean): void;
    filterColorFilterCheckedChanged(newValue: boolean): void;
    filterColorFilterThresholdChanged(newValue: number, isSilent: boolean): void;
    filterTintColorChanged(newColor: string): void;
    filterTintCheckedChanged(newValue: boolean): void;
    filterMultiplyColorChanged(newColor: string): void;
    filterMultiplyCheckedChanged(newValue: boolean): void;
    filterBlendColorChanged(newColor: string): void;
    filterBlendCheckedChanged(newValue: boolean): void;
    filterBlurCheckedChanged(newValue: boolean): void;
    filterGrayscaleCheckedChanged(newValue: boolean): void;
    filterSepiaCheckedChanged(newValue: boolean): void;
    filterEmbossCheckedChanged(newValue: boolean): void;
    filterInvertCheckedChanged(newValue: boolean): void;
    filterVintageCheckedChanged(newValue: boolean): void;
    filterSharpenCheckedChanged(newValue: boolean): void;
    filterApply(type: 'white-removal' | 'brightness' | 'noise' | 'pixelate' | 'removeColor' | 'blur' | 'blend' | 'multiply' | 'tint' | 'grayscale' | 'sepia' | 'emboss' | 'invert' | 'vintage' | 'sharpen', isSilent?: boolean): void;
    filterApplyConfirmed(applying: boolean, type: 'removeColor' | 'brightness' | 'noise' | 'pixelate' | 'blur' | 'blendColor' | 'grayscale' | 'sepia' | 'emboss' | 'invert' | 'vintage' | 'sharpen', options: any, isSilent?: boolean): Promise<void>;
    static ɵfac: i0.ɵɵFactoryDef<FilterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<FilterComponent, "tui-image-editor-submenus-filter", never, { "imageEditor": "imageEditor"; }, {}, never, never>;
}
//# sourceMappingURL=filter.component.d.ts.map